.. _laravel-fundamentals-retrieve:

==============
Retrieve Data
==============

.. facet::
   :name: genre
   :values: tutorial

.. meta::
   :keywords: find one, find many, code example

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use {+odm-short+} to perform **find operations**
on your MongoDB collections. Find operations allow you to retrieve documents based on
criteria that you specify.

This guide shows you how to perform the following tasks:

- :ref:`laravel-retrieve-matching`
- :ref:`laravel-retrieve-all`
- :ref:`Modify Find Operation Behavior <laravel-modify-find>`

Before You Get Started
----------------------

To run the code examples in this guide, complete the :ref:`Quick Start <laravel-quick-start>`
tutorial. This tutorial provides instructions on setting up a MongoDB Atlas instance with
sample data and creating the following files in your Laravel web application:

- ``Movie.php`` file, which contains a ``Movie`` model to represent documents in the ``movies``
  collection
- ``MovieController.php`` file, which contains a ``show()`` function to run database operations
- ``browse_movies.blade.php`` file, which contains HTML code to display the results of database
  operations

The following sections describe how to edit the files in your Laravel application to run
the find operation code examples and view the expected output.

.. _laravel-retrieve-matching:

Retrieve Documents that Match a Query
-------------------------------------

You can use Laravel's Eloquent object-relational mapper (ORM) to create models
that represent MongoDB collections and chain methods on them to specify
query criteria.

To retrieve documents that match a set of criteria, pass a query filter to the
``where()`` method.

A query filter specifies field value requirements and instructs the find
operation to return only documents that meet these requirements.

You can use Laravel's Eloquent object-relational mapper (ORM) to create models
that represent MongoDB collections. To retrieve documents from a collection,
call the ``where()`` method on the collection's corresponding Eloquent model.

You can use one of the following ``where()`` method calls to build a query:

- ``where('<field name>', <value>)`` builds a query that matches documents in
  which the target field has the exact specified value

- ``where('<field name>', '<comparison operator>', <value>)`` builds a query
  that matches documents in which the target field's value meets the comparison
  criteria

To apply multiple sets of criteria to the find operation, you can chain a series
of ``where()`` methods together.

After building your query with the ``where()`` method, chain the ``get()``
method to retrieve the query results.

This example calls two ``where()`` methods on the ``Movie`` Eloquent model to
retrieve documents that meet the following criteria:

- ``year`` field has a value of ``2010``
- ``imdb.rating`` nested field has a value greater than ``8.5``

.. tabs::

   .. tab:: Query Syntax
      :tabid: query-syntax

      Use the following syntax to specify the query:

      .. code-block:: php

         $movies = Movie::where('year', 2010)
             ->where('imdb.rating', '>', 8.5)
             ->get();

   .. tab:: Controller Method
      :tabid: controller

      To see the query results in the ``browse_movies`` view, edit the ``show()`` function
      in the ``MovieController.php`` file to resemble the following code:

      .. io-code-block::
         :copyable: true

         .. input::
            :language: php

            class MovieController
            {
                public function show()
                {
                     $movies = Movie::where('year', 2010)
                         ->where('imdb.rating', '>', 8.5)
                         ->get();

                     return view('browse_movies', [
                         'movies' => $movies
                     ]);
                }
            }

         .. output::
            :language: none
            :visible: false

            Title: Inception
            Year: 2010
            Runtime: 148
            IMDB Rating: 8.8
            IMDB Votes: 1294646
            Plot: A thief who steals corporate secrets through use of dream-sharing
            technology is given the inverse task of planting an idea into the mind of a CEO.

            Title: Senna
            Year: 2010
            Runtime: 106
            IMDB Rating: 8.6
            IMDB Votes: 41904
            Plot: A documentary on Brazilian Formula One racing driver Ayrton Senna, who won the
            F1 world championship three times before his death at age 34.

To learn how to query by using the Laravel query builder instead of the
Eloquent ORM, see the :ref:`laravel-query-builder` page.

.. _laravel-retrieve-all:

Retrieve All Documents in a Collection
--------------------------------------

You can retrieve all documents in a collection by omitting the query filter.
To return the documents, call the ``get()`` method on an Eloquent model that
represents your collection. Alternatively, you can use the ``get()`` method's
alias ``all()`` to perform the same operation.

Use the following syntax to run a find operation that matches all documents:

.. code-block:: php

   $movies = Movie::get();

.. warning::

   The ``movies`` collection in the Atlas sample dataset contains a large amount of data.
   Retrieving and displaying all documents in this collection might cause your web
   application to time out.

   To avoid this issue, specify a document limit by using the ``take()`` method. For
   more information about ``take()``, see the :ref:`laravel-modify-find` section of this
   guide.

.. _laravel-modify-find:

Modify Behavior
---------------

You can modify the results of a find operation by chaining additional methods
to ``where()``.

The following sections demonstrate how to modify the behavior of the ``where()``
method:

- :ref:`laravel-skip-limit` uses the ``skip()`` method to set the number of documents
  to skip and the ``take()`` method to set the total number of documents to return
- :ref:`laravel-retrieve-one` uses the ``first()`` method to return the first document
  that matches the query filter

.. _laravel-skip-limit:

Skip and Limit Results
~~~~~~~~~~~~~~~~~~~~~~

This example queries for documents in which the ``year`` value is ``1999``.
The operation skips the first ``2`` matching documents and outputs a total of ``3``
documents.

.. tabs::

   .. tab:: Query Syntax
      :tabid: query-syntax

      Use the following syntax to specify the query:

      .. code-block:: php

         $movies = Movie::where('year', 1999)
             ->skip(2)
             ->take(3)
             ->get();

   .. tab:: Controller Method
      :tabid: controller

      To see the query results in the ``browse_movies`` view, edit the ``show()`` function
      in the ``MovieController.php`` file to resemble the following code:

      .. io-code-block::
         :copyable: true

         .. input::
            :language: php

            class MovieController
            {
                public function show()
                {
                     $movies = Movie::where('year', 1999)
                         ->skip(2)
                         ->take(3)
                         ->get();

                     return view('browse_movies', [
                         'movies' => $movies
                     ]);
                }
            }

         .. output::
            :language: none
            :visible: false

            Title: Three Kings
            Year: 1999
            Runtime: 114
            IMDB Rating: 7.2
            IMDB Votes: 130677
            Plot: In the aftermath of the Persian Gulf War, 4 soldiers set out to steal gold
            that was stolen from Kuwait, but they discover people who desperately need their help.

            Title: Toy Story 2
            Year: 1999
            Runtime: 92
            IMDB Rating: 7.9
            IMDB Votes: 346655
            Plot: When Woody is stolen by a toy collector, Buzz and his friends vow to rescue him,
            but Woody finds the idea of immortality in a museum tempting.

            Title: Beowulf
            Year: 1999
            Runtime: 95
            IMDB Rating: 4
            IMDB Votes: 9296
            Plot: A sci-fi update of the famous 6th Century poem. In a beseiged land, Beowulf must
            battle against the hideous creature Grendel and his vengeance seeking mother.

.. _laravel-retrieve-one:

Return the First Result
~~~~~~~~~~~~~~~~~~~~~~~

To retrieve the first document that matches a set of criteria, use the ``where()`` method
followed by the ``first()`` method.

Chain the ``orderBy()`` method to ``first()`` to get consistent results when you query on a unique
value. If you omit the ``orderBy()`` method, MongoDB returns the matching documents according to
the documents' natural order, or as they appear in the collection.

This example queries for documents in which the value of the ``runtime`` field is
``30`` and returns the first matching document according to the value of the ``_id``
field.

.. tabs::

   .. tab:: Query Syntax
      :tabid: query-syntax

      Use the following syntax to specify the query:

      .. code-block:: php

         $movies = Movie::where('runtime', 30)
             ->orderBy('_id')
             ->first();

   .. tab:: Controller Method
      :tabid: controller

      To see the query results in the ``browse_movies`` view, edit the ``show()`` function
      in the ``MovieController.php`` file to resemble the following code:

      .. io-code-block::
         :copyable: true

         .. input::
            :language: php

            class MovieController
            {
                public function show()
                {
                    $movies = Movie::where('runtime', 30)
                        ->orderBy('_id')
                        ->first();

                    return view('browse_movies', [
                        'movies' => $movies
                    ]);
                }
            }

         .. output::
            :language: none
            :visible: false

            Title: Statues also Die
            Year: 1953
            Runtime: 30
            IMDB Rating: 7.6
            IMDB Votes: 620
            Plot: A documentary of black art.

.. tip::

   To learn more about sorting, see the following resources:

   - :manual:`Natural order </reference/glossary/#std-term-natural-order>`
     in the Server manual glossary
   - `Ordering, Grouping, Limit and Offset <https://laravel.com/docs/10.x/queries#ordering-grouping-limit-and-offset>`__
     in the Laravel documentation

