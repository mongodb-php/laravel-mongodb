.. _laravel-retrieve:

==============
Retrieve Data
==============

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: find one, find many, code example

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to retrieve data from your MongoDB
collections by using **find operations**. Find operations are commands that
retrieve documents from the server.

This guide includes the following sections:

- :ref:`laravel-retrieve-setup`
- :ref:`laravel-retrieve-matching`
- :ref:`laravel-modify-find`
- :ref:`laravel-addtl-info`

.. _laravel-retrieve-setup:

Prerequisites
-------------

Complete the :ref:`Quick Start <laravel-quick-start>` tutorial before running the examples in this
guide.

After completing the Quick Start, your MongoDB deployment and ``my-app`` Laravel application
should satisfy the following requirements:

- Atlas MongoDB deployment stores the Atlas sample data
- ``Movie.php`` file contains a ``Movie`` model to represent the ``movies`` collection
- ``MovieController.php`` file contains a ``show()`` function to run database operations
- ``browse_movies.blade.php`` file contains HTML code to display the results of database
  operations

You must edit some files in your ``my-app`` directory to run the code examples in this
guide. You can find information on required file changes in each section that contains
a code example.

.. _laravel-retrieve-matching:

Retrieve Matching Documents
---------------------------

To retrieve documents that match a set of criteria, or a query filter, call the ``where()``
method on your collection. Pass the field name and value for which you are querying
as parameters to ``where()``.

You can also pass a comparison operator as the ``where()`` method's second parameter,
such as the ``>`` operator to perform a "greater than" comparison. If you do not include
a comparison operator parameter, the find operation queries for documents whose field
values are equal to the specified value.

To apply multiple sets of criteria to the find operation, you can chain a series
of ``where()`` methods together.

Retrieve All Matching Documents
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This example chains two ``where()`` methods together to retrieve documents that meet
the following criteria:

- ``year`` field has a value of ``2010``
- ``imdb.rating`` nested field has a value greater than ``8.5``

.. io-code-block::
   :copyable: true

   .. input::
      :language: php

      return view('browse_movies', [
         'movies' => Movie::where('year', 2010)
            ->where('imdb.rating', '>', 8.5)
            ->get()
      ]);

   .. output::
      :language: none
      :visible: false

      Title: Inception
      Year: 2010
      Runtime: 148
      IMDB Rating: 8.8
      IMDB Votes: 1294646
      Plot: A thief who steals corporate secrets through use of dream-sharing
      technology is given the inverse task of planting an idea into the mind of a CEO.

      Title: Senna
      Year: 2010
      Runtime: 106
      IMDB Rating: 8.6
      IMDB Votes: 41904
      Plot: A documentary on Brazilian Formula One racing driver Ayrton Senna, who won the
      F1 world championship three times before his death at age 34.

.. important:: Required File Changes

   To run the preceding code example, you must edit the ``MovieController.php`` file in your
   ``my-app`` application. Copy the code example and paste it into the ``show()`` function, replacing
   any existing code inside this function.

Retrieve All Documents
~~~~~~~~~~~~~~~~~~~~~~

You can perform a find operation without specifying a query filter, which retrieves all
documents in a collection. Use the following syntax to run a find operation that matches all
documents:

.. code-block:: php

   $movies = Movie::get();

Alternatively, use the ``get()`` method's alias ``all()`` to retrieve all documents.

.. warning::

   The ``movies`` collection in the Atlas sample dataset stores a large amount of data.
   Retrieving and displaying all documents in this collection may cause your web 
   application to time out.

Retrieve One Matching Document
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To retrieve only one document that matches a set of criteria, use the ``where()`` method
followed by the ``first()`` method. By default, the ``first()`` method returns the first
matching document according to the documents' natural order, or as they appear in the
database. If you apply a sort to the find operation, ``first()`` returns the first matching
document according to the sorted order. 

To learn more about sorting, see the following resources:

- :manual:`natural order </reference/glossary/#std-term-natural-order>`
  in the Server manual glossary
- `Ordering, Grouping, Limit and Offset
  <https://laravel.com/docs/10.x/queries#ordering-grouping-limit-and-offset>`__ in the Laravel
  documentation
   
The following example returns one document in which the value of the ``title`` field
is ``"The Parent Trap"``:

.. io-code-block::
   :copyable: true

   .. input::
      :language: php
      
      return view('browse_movies', [
         'movies' => Movie::where('title', 'The Parent Trap')
            ->first()
      ]);

   .. output::
      :language: none
      :visible: false

      Title: The Parent Trap
      Year: 1961
      Runtime: 129
      IMDB Rating: 7.1
      IMDB Votes: 12768
      Plot: Teenage twin girls swap places and scheme to reunite their divorced parents.

Without chaining the ``first()`` method to the ``where()`` method, the preceding example returns
two documents in which the ``title`` value is ``"The Parent Trap"``.

.. important:: Required File Changes

   To run the preceding code example, you must edit the ``MovieController.php`` file in your
   ``my-app`` application. Copy the code example and paste it into the ``show()`` function, replacing
   any existing code inside this function.

Use Laravel Queries to Retrieve Documents
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Rather than on a model, you can run find operations on a query builder instance that
represents your collection. To construct a query builder instance, import the ``DB``
facade into your controller file and use Laravel's database query builder syntax.

The following example uses Laravel's query builder to retrieve documents in which the value
of the ``imdb.votes`` nested field is greater than ``1300000``:

.. io-code-block::
   :copyable: true

   .. input::
      :language: php

      return view('browse_movies', [
         'movies' => DB::collection('movies')
               ->where('imdb.votes', '>', 1300000)
               ->get()
      ]);

   .. output::
      :language: none
      :visible: false

      Title: The Shawshank Redemption
      Year: 1994
      Runtime: 142
      IMDB Rating: 9.3
      IMDB Votes: 1513145
      Plot: Two imprisoned men bond over a number of years, finding solace and eventual redemption
      through acts of common decency.

      Title: The Dark Knight
      Year: 2008
      Runtime: 152
      IMDB Rating: 9
      IMDB Votes: 1495351
      Plot: When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the
      caped crusader must come to terms with one of the greatest psychological tests of his ability to
      fight injustice.

.. important:: Required File Changes

   To run the preceding code example, you must make the following changes to your ``my-app``
   application:

   - Copy the code example and paste it into the ``show()`` function in your ``MovieController.php`` file
   - Add the ``use Illuminate\Support\Facades\DB`` use statement to your ``MovieController.php``
     file
   - Replace ``DB_CONNECTION=mysql`` with ``DB_CONNECTION=mongodb`` in your ``.env`` file
   - Replace the contents of your ``browse_movies.blade.php`` file with the following code:

   .. code-block:: php

      <!DOCTYPE html>
      <html>
      <head>
         <title>Browse Movies</title>
      </head>
      <body>
      <h2>Movies</h2>

      @forelse ($movies as $movie)
      <p>
         Title: {{ $movie['title'] }}<br>
         Year: {{ $movie['year'] }}<br>
         Runtime: {{ $movie['runtime'] }}<br>
         IMDB Rating: {{ $movie['imdb']['rating'] }}<br>
         IMDB Votes: {{ $movie['imdb']['votes'] }}<br>
         Plot: {{ $movie['plot'] }}<br>
      </p>
      @empty
         <p>No results</p>
      @endforelse

      </body>
      </html>

.. _laravel-modify-find:

Modify Behavior
---------------

You can modify the results of a find operation by chaining the following methods
to ``where()``:

- ``skip()``: sets the number of documents to skip when returning results
- ``take()``: sets the total number of documents to return

The ``skip()`` and ``take()`` methods both accept an integer value as a parameter.

Modify Find Operation Example
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example queries for documents in which the ``year`` value is ``1999``.
The operation skips the first ``2`` matching documents and outputs a total of ``3``
documents:

.. io-code-block::
   :copyable: true

   .. input::
      :language: php

      return view('browse_movies', [
         'movies' => Movie::where('year', 1999)
            ->skip(2)
            ->take(3)
            ->get()
      ]);

   .. output::
      :language: none
      :visible: false

      Title: Three Kings
      Year: 1999
      Runtime: 114
      IMDB Rating: 7.2
      IMDB Votes: 130677
      Plot: In the aftermath of the Persian Gulf War, 4 soldiers set out to steal gold
      that was stolen from Kuwait, but they discover people who desperately need their help.

      Title: Toy Story 2
      Year: 1999
      Runtime: 92
      IMDB Rating: 7.9
      IMDB Votes: 346655
      Plot: When Woody is stolen by a toy collector, Buzz and his friends vow to rescue him,
      but Woody finds the idea of immortality in a museum tempting.

      Title: Beowulf
      Year: 1999
      Runtime: 95
      IMDB Rating: 4
      IMDB Votes: 9296
      Plot: A sci-fi update of the famous 6th Century poem. In a beseiged land, Beowulf must
      battle against the hideous creature Grendel and his vengeance seeking mother.

.. important:: Required File Changes

   To run the preceding code example, you must edit the ``MovieController.php`` file in your
   ``my-app`` application. Copy the code example and paste it into the ``show()`` function, replacing
   any existing code inside this function.

.. _laravel-addtl-info:

Additional Information
----------------------

To learn more about the methods mentioned in this guide, see the 
:ref:`laravel-query-builder` page.
