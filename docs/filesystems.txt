.. _laravel-queues:

======
Queues
======

.. facet::
   :name: genre
   :values: tutorial

.. meta::
   :keywords: php framework, gridfs, code example

Overview
--------

Using MongoDB to store files can be done using the
`GridFS Adapter for Flysystem <https://flysystem.thephpleague.com/docs/adapter/gridfs/>`__.
GridFS lets you store files of unlimited size in the same database as your data.
This ensures the integrity of transactions and backups.


Configuration
-------------

Before using the GridFS driver, you will need to install the Flysystem GridFS package via the Composer package manager:

.. code-block:: bash

   composer require league/flysystem-gridfs

Configure `Laravel File Storage <https://laravel.com/docs/{+laravel-docs-version+}/filesystem>`__,
to use the ``gridfs`` driver in ``config/filesystems.php``:

.. code-block:: php

   'disks' => [
       'gridfs' => [
           'driver' => 'gridfs',
           'connection' => 'mongodb',
           'database' => 'files',
           'bucket' => 'fs',
           'prefix' => '',
           'read-only' => false,
           'throw' => false,
       ],
   ],

.. list-table::
   :header-rows: 1
   :widths: 25 75

   * - Setting
     - Description

   * - ``driver``
     - **Required**. Specifies the filesystem driver to use. Must be ``gridfs`` for MongoDB.

   * - ``connection``
     - The database connection used to store jobs. It must be a ``mongodb`` connection. The driver uses the default connection if a connection is not specified.

   * - ``database``
     - Name of the MongoDB database fot the GridFS bucket. Use the database of the connection if not specified.

   * - ``bucket``
     - Name of the GridFS bucket. A database can contain multiple buckets identified by their name. Defaults to ``fs``.

   * - ``prefix``
     - Specifies a prefix for the name of the files that are stored in the bucket. Using a distinct bucket is recommended
       in order to store the files in a different collection.

   * - ``read-only``
     - If ``true``, writing to the GridFS bucket is disabled. Write operations will return ``false`` or throw exceptions
       depending on the configuration of ``throw``. Defaults to ``false``.

   * - ``throw``
     - If ``true``, exceptions are thrown when an operation cannot be performed. Defaults to ``false``, the operations
       return ``true`` in case of succes, ``false`` in case of error.

If you have specific requirements, you can use a factory or a service name to define the bucket. The options
``connection`` and ``database`` are ignored when a ``MongoDB\GridFS\Bucket`` is provided:

.. code-block:: php

    use Illuminate\Foundation\Application;
    use MongoDB\GridFS\Bucket;

   'disks' => [
       'gridfs' => [
           'driver' => 'gridfs',
           'bucket' => static function (Application $app): Bucket {
               return $app['db']->connection('mongodb')
                   ->getMongoDB()
                   ->selectGridFSBucket([
                       'bucketName' => 'avatars',
                       'chunkSizeBytes' => 261120,
                   ]);
           },
       ],
   ],

Usage
-----

The benefits of using Laravel File Storage facade, is that it provides a common
interface for all the supported file systems. Use the ``gridfs`` disk in the
same way as the ``local`` disk.

.. code-block:: php

   $disk = Storage::disk('gridfs');

   // Write the file "hello.txt" into GridFS
   $disk->put('hello.txt', 'Hello World!');

   // Read the file
   echo $disk->get('hello.txt'); // Hello World!

To learn more Laravel File Storage, see
`Laravel File Storage <https://laravel.com/docs/{+laravel-docs-version+}/filesystem>`__.

Versioning
----------

In GridFS, file names are metadata to file objects identified by unique MongoDB ObjectID.
There may be more than one file with the same name, they are called "revisions":

- Reading a file reads the last revision of this file name
- Writing to a file name creates a new revision for this file name
- Renaming a file renames all the revisions of this file name
- Deleting a file deletes all the revisions of this file name

The GridFS Adapter for Flysystem does not provide access to a specific revision
of a filename, you must use the :manual:`GridFS API </tutorial/gridfs/>` if you
need to work with revisions.

.. code-block:: php

   // Create a MongoDB Bucket service from the MongoDB connection
   /** @var \MongoDB\GridFS\Bucket $bucket */
   $bucket = $app['db']->connection('mongodb')->getMongoDB()->selectGridFSBucket();

   // Download the last but one version of a file
   $bucket->openDownloadStreamByName('hello.txt', ['revision' => -2])
