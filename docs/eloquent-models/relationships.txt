.. _laravel-eloquent-model-relationships:

============================
Eloquent Model Relationships
============================

.. facet::
   :name: genre
   :values: tutorial

.. meta::
   :keywords: php framework, odm, code example, entity relationship, eloquent

Overview
--------

This section describes the following Laravel Eloquent and MongoDB-specific
relationships available in {+odm-short+} and shows examples on how to define
and use them:

- :ref:`One to one relationship <laravel-eloquent-relationship-one-to-one>`,
  created by using the ``hasOne()`` method and its inverse, ``belongsTo()``
- :ref:`One to many relationship <laravel-eloquent-relationship-one-to-many>`,
  created by using the ``hasMany()`` and its inverse, ``belongsTo()``
- :ref:`Many to many relationship <laravel-eloquent-relationship-many-to-many>`,
  created by using the ``belongsToMany()`` method
- :ref:`Embedded document pattern <laravel-embedded-document-pattern>`,
  specific to MongoDB, which can represent a one
  to one or one to many relationship by using the ``embedsOne()`` or
  ``embedsMany()`` method

To establish a relationship, add an Eloquent **dynamic property** to access the
related model. The dynamic property lets you access the relational method by
using the same syntax as you use to access a property on the model.

.. _laravel-eloquent-relationship-one-to-one:

One to One Relationship
-----------------------

A one to one relationship between models consists of a model record that
is related to exactly one other type of model record. In MongoDB, a record
is represented as a document and different model types exist in separate
collections.

In {+odm-short+}, you can define a one to one relationship by using the
``hasOne()`` method or ``belongsTo()`` method.

When you establish a one to one relationship by using the ``hasOne()`` method,
Eloquent lets you access the model by using a dynamic property and stores the
model's ID on the related model.

When you establish the inverse of the relationship by using the ``belongsTo()``
method, Eloquent lets you access the model by using a dynamic property, but
does not add any fields.

The following section shows an example of how to create one to one
relationships.

To learn more about one to one relationships, see
`One to One <https://laravel.com/docs/10.x/eloquent-relationships#one-to-one>`__
in the Laravel docs.

One to One Example
~~~~~~~~~~~~~~~~~~

The following example class shows how to define a ``HasOne`` one to one
relationship between a ``Planet`` and ``Orbit`` model.

.. literalinclude:: /includes/eloquent-models/relationships/PlanetOneToOne.php
   :language: php
   :dedent:

To define the inverse of the relationship on ``Orbit``, add the dynamic
property and call the ``belongsTo()`` method on it as shown in the following
example class:

.. literalinclude:: /includes/eloquent-models/relationships/OrbitOneToOne.php
   :language: php
   :dedent:

The following sample code shows how you can create a model for each class
and add the relationship between them:

.. literalinclude:: /includes/eloquent-models/relationships/RelationshipController.php
   :language: php
   :dedent:
   :starts-after: begin one-to-one save
   :ends-before: end one-to-one save

The following sample code shows how you can access the related models by using
the dynamic properties as defined in the example classes:

.. literalinclude:: /includes/eloquent-models/relationships/RelationshipController.php
   :language: php
   :dedent:
   :starts-after: begin dynamic property example
   :ends-before: end dynamic property example

The models created in the prior examples resemble the following documents
in MongoDB:

.. code-block:: javascript
   :copyable: false

   // Document in the "planets" collection
   {
     _id: ObjectId('65de67fb2e59d63e6d07f8b8'),
     name: 'Earth',
     diameter_km: 12742,
     // ...
   }

   // Document in the "orbits" collection
   {
     _id: ObjectId('65de67fb2e59d63e6d07f8b9'),
     period: 365.26,
     direction: 'counterclockwise',
     planet_id: '65de67fb2e59d63e6d07f8b8',
     // ...
   }

.. _laravel-eloquent-relationship-one-to-many:

One to Many Relationship
------------------------

.. _laravel-eloquent-relationship-many-to-many:

Many to Many Relationship
-------------------------


.. _laravel-embedded-document-pattern:

Embedded Document Pattern
-------------------------




