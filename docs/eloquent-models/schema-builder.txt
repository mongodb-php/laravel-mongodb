.. _laravel-eloquent-schema-builder:

==============
Schema Builder
==============

.. facet::
   :name: genre
   :values: tutorial

.. meta::
   :keywords: php framework, odm, code example, schema facade, php artisan, eloquent

Overview
--------

Laravel provides a ``Schema`` **facade** to access the schema builder, which
lets you create and modify tables. Facades are static interfaces to classes
that make the syntax more concise and improve testability.

{+odm-short+} supports index and collection management methods of the
Laravel ``Schema`` facade.

To learn more about Laravel Facades, see `Facades <https://laravel.com/docs/{+laravel-docs-version+}/facades>`__
in the Laravel documentation.

The following sections describe the Laravel schema builder and functionality
available in {+odm-short+} and show examples of how to use them:

- :ref:`<laravel-eloquent-migrations>`
- :ref:`<laravel-eloquent-indexes>`
- :ref:`<laravel-eloquent-collections>`
- :ref:`<laravel-eloquent-customize-collection>`

.. _laravel-eloquent-migrations:

Perform Laravel Migrations
--------------------------

Laravel lets you create and make modifications to your database schema by
running methods that call the ``Schema`` facade. The process of running this
logic is called a migration.

You can generate the migration class files by using the ``php artisan make:migration``
command. Make the following changes to the generated files to perform the
migration on your MongoDB database:

- Replace the ``Illuminate\Database\Schema\Blueprint`` import with 
  ``MongoDB\Laravel\Schema\Blueprint``
- Specify ``mongodb`` in the ``$connection`` field
- Use only commands and syntax supported by {+odm-short+}

.. tip::

   Make sure you set ``DB_CONNECTION=mongodb`` in your ``.env`` configuration
   file so that PHP artisan performs the migration on the correct database.

To run the database migration from a class file, run the following PHP artisan
command:

.. code-block:: bash

   php artisan migrate --path=<path to your migration class file>

This artisan command runs the ``up()`` method in the class file to create
the collection and index in the database specified in the ``config/database.php``
file.

To roll back the migration, run the following PHP artisan command:

.. code-block:: bash

   php artisan migrate:rollback --path=<path to your migration class file>

This command runs the ``down()`` method in the class file to drop the
collection and related indexes.

The following example migration class file that creates a collection and
index when you run the migration and drops it when you roll back the migration:

.. literalinclude:: /includes/schema-builder/astronauts_migration.php
   :language: php

.. _laravel-eloquent-indexes:

Manage Indexes
--------------

TODO

.. _laravel-eloquent-collections:

Manage Collections
------------------

TODO

.. _laravel-eloquent-customize-collection:

Customize Collection Creation
-----------------------------

TODO

Notes:

- create and drop (is this different from index and dropIndex?)
  Schema::create(<collection name>, function ($collection) {
  $collection->index(<>);
  $collection->unique(<>);
  Geospatial index

- collection (what does this method do?)
  Schema::hasCollection(<collection name>); check whether a collection exists

- determining column existence
- drop collection     public function dropIfExists($table)
  {
  if ($this->hasCollection($table)) {
  $this->drop($table);
  }
  }

index($columns = null, $name = null, $algorithm = null, $options = [])
dropIndex($index = null)
public function dropIndexIfExists($indexOrColumns = null)\
public function hasIndex($indexOrColumns = null)

public function unique($columns = null, $name = null, $algorithm = null, $options = [])

Creation options

https://www.mongodb.com/docs/manual/reference/method/db.collection.createIndex/#options-for-all-index-types

- background - what is this? Hasn't this been replaced by index behavior in 4.2?
- sparse https://www.mongodb.com/docs/manual/core/index-sparse/
- expire is this a ttl index? https://www.mongodb.com/docs/manual/core/index-ttl/
- geospatial https://www.mongodb.com/docs/manual/core/indexes/index-types/index-geospatial/

.. note::

   Although MongoDB collections can be schemaless, you can provide
   schemas for data validation. The {+odm-short+} schema builder does not
   currently offer methods to
