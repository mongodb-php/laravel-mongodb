.. _laravel-queues:

======
Queues
======

.. facet::
   :name: genre
   :values: tutorial

.. meta::
   :keywords: php framework, odm, code example, jobs

To use MongoDB as your database for Laravel Queue, change
the driver in your application's ``config/queue.php`` file:

.. code-block:: php

   'connections' => [
       'database' => [
           'driver' => 'mongodb',
           // You can also specify your jobs-specific database created on config/database.php
           'connection' => 'mongodb',
           'collection' => 'jobs',
           'queue' => 'default',
           'retry_after' => 60,
       ],
   ],

The following table describes properties that you can specify to configure
the behavior of the queue:

.. list-table::
   :header-rows: 1
   :widths: 25 75

   * - Setting
     - Description

   * - ``driver``
     - **Required**. Specifies the queue driver to use. The value of
       this property must be ``mongodb``.

   * - ``connection``
     - Specifies the database connection used to store jobs. It must be a
       ``mongodb`` connection. The driver uses the default connection if
       a connection is not specified.

   * - ``collection``
     - **Required**. Specifies the name of the MongoDB collection to
       store jobs to process.

   * - ``queue``
     - **Required**. Specifies the name of the queue.

   * - ``retry_after``
     - Specifies how many seconds the queue connection should wait
       before retrying a job that is being processed. The value is
       ``60`` by default.

To use MongoDB to handle failed jobs, create a ``failed`` entry in your
application's ``config/queue.php`` file and specify the database and
collection:

.. code-block:: php

   'failed' => [
       'driver' => 'mongodb',
       'database' => 'mongodb',
       'collection' => 'failed_jobs',
   ],

The following table describes properties that you can specify to configure
how to handle failed jobs:

.. list-table::
   :header-rows: 1
   :widths: 25 75

   * - Setting
     - Description

   * - ``driver``
     - **Required**. Specifies the queue driver to use. The value of
       this property must be ``mongodb``.

   * - ``connection``
     - Specifies the database connection used to store jobs. It must be
       a ``mongodb`` connection. The driver uses the default connection
       if a connection is not specified.

   * - ``collection``
     - Specifies the name of the MongoDB collection to store failed
       jobs. The value is ``failed_jobs`` by default.

Then, add the service provider in your application's
``config/app.php`` file:

.. code-block:: php

   MongoDB\Laravel\MongoDBQueueServiceProvider::class,

Job Batching
------------

**Job batching** is a Laravel feature that enables you to execute a
batch of jobs and subsequent actions before, after, and during the
execution of the jobs from the queue. To learn more about this feature,
see `Job Batching <https://laravel.com/docs/{+laravel-docs-version+}/queues#job-batching>`__
in the Laravel documentation.

In MongoDB, you don't have to create a designated collection before
using job batching. The ``job_batches`` collection is created
automatically to store meta-information about your job batches, such as
their completion percentage.

To enable job batching, create the ``batching`` entry in your
application's ``config/queue.php`` file:

.. code-block:: php

    'batching' => [
       'driver' => 'mongodb',
       'database' => 'mongodb',
       'collection' => 'job_batches',
   ],

The following table describes properties that you can specify to configure
job batching:

.. list-table::
   :header-rows: 1
   :widths: 25 75

   * - Setting
     - Description

   * - ``driver``
     - **Required**. Specifies the queue driver to use. The value of
       this property must be ``mongodb``.

   * - ``connection``
     - Specifies the database connection used to store jobs. It must be a
       ``mongodb`` connection. The driver uses the default connection if
       a connection is not specified.

   * - ``collection``
     - Specifies the name of the MongoDB collection to store job
       batches. The value is ``job_batches`` by default.

The, add the service provider in ``config/app.php``:

.. code-block:: php

   MongoDB\Laravel\MongoDBBusServiceProvider::class,
