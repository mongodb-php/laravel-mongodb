.. _laravel-user-authentication:

===================
User Authentication
===================

.. facet::
   :name: genre
   :values: tutorial

.. meta::
   :keywords: php framework, odm, code example

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

In this guide, you can learn how to use the {+odm-long+} to create a ``User``
model and configure user authentication.

User Model
----------

By default, Laravel includes an ``App\Models\User`` Eloquent model in your ``app/Models``
directory. You can extend the ``Jenssegers\Mongodb\Auth\User`` class to configure your
``User`` model to use the Laravel Auth module, which provides multiple authentication services.
To extend this class, navigate to your ``app/Models/User.php`` file and replace the
``use Illuminate\Foundation\Auth\User as Authenticatable`` use statement with the following code:

.. code-block:: php

   use Jenssegers\Mongodb\Auth\User as Authenticatable;

Ensure that your ``User`` class extends ``Authenticatable``, as shown in the following code:

.. code-block:: php

   class User extends Authenticatable
   {
   ...
   }

After configuring your ``User`` model, create a corresponding controller. For instructions on
creating a controller, see the :ref:`laravel-auth-controller` section on this page.

Example
~~~~~~~

The following code demonstrates a ``User.php`` file that extends the ``Jenssegers\Mongodb\Auth\User``
class:

.. literalinclude:: /includes/auth/AuthUser.php
   :language: php
   :dedent:

.. _laravel-auth-controller:

User Controller 
---------------

To store functions that manage authentication, create an authentication controller for
your ``User`` model. 

Run the following command from your project root to create a controller:

.. code-block:: php

   php artisan make:controller <filename>

Example
~~~~~~~

The following command creates a controller file called ``AuthController.php``:

.. code-block:: php

   php artisan make:controller AuthController

The ``AuthController.php`` file can store ``login()`` and ``logout()`` functions to
manage user authentication, as shown in the following code: 

.. literalinclude:: /includes/auth/AuthController.php
   :language: php
   :dedent:

Enable Password Reminders 
-------------------------

To add support for MongoDB-based password reminders, register the following service
provider in your application:

.. code-block:: php

   MongoDB\Laravel\Auth\PasswordResetServiceProvider::class

This service provider modifies the internal ``DatabaseReminderRepository``
to enable password reminders.

Example
~~~~~~~

The following code updates the ``providers.php`` file in the ``bootstrap`` directory
of a Laravel application to register the ``PasswordResetServiceProvider`` provider:

.. code-block:: php
   :emphasize-lines: 4

   return [
     App\Providers\AppServiceProvider::class,
     MongoDB\Laravel\MongoDBServiceProvider::class,
     MongoDB\Laravel\Auth\PasswordResetServiceProvider::class
   ];

Additional Information
----------------------

To learn more about user authentication, see `Authentication <https://laravel.com/docs/{+laravel-docs-version+}/authentication>`__
in the Laravel documentation.

To learn more about Eloquent models, see the :ref:`laravel-eloquent-model-class` guide.