.. _laravel-user-authentication:

===================
User Authentication
===================

.. facet::
   :name: genre
   :values: tutorial

.. meta::
   :keywords: php framework, odm, code example

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to authenticate MongoDB users
by using Laravel's native authentication functionality. 

Laravel provides a native ``Auth`` module that includes authentication services,
such as guards that define how users are authenticated and providers that define
how users are retrieved. To learn more about these services, see `Authentication 
<https://laravel.com/docs/{+laravel-docs-version+}/authentication>`__ in the
Laravel documentation.

Modify the User Model
---------------------

By default, Laravel generates the ``User`` Eloquent model in your ``App/Models``
directory. To enable authentication for MongoDB users, your ``User`` model
must extend the ``MongoDB\Laravel\Auth\User`` class. 

To extend this class, navigate to your ``app/Models/User.php`` file and replace the
``use Illuminate\Foundation\Auth\User as Authenticatable`` statement with the following
code:

.. code-block:: php

   use MongoDB\Laravel\Auth\User as Authenticatable;

Next, ensure that your ``User`` class extends ``Authenticatable``, as shown in the following
code:

.. code-block:: php

   class User extends Authenticatable
   {
   ...
   }

After configuring your ``User`` model, create a corresponding controller. To learn how to
create a controller, see the :ref:`laravel-auth-controller` section on this page.

Example
~~~~~~~

The following code shows a ``User.php`` file that extends the ``MongoDB\Laravel\Auth\User``
class:

.. literalinclude:: /includes/auth/AuthUser.php
   :language: php
   :dedent:

.. _laravel-auth-controller:

Create the User Controller 
--------------------------

To store functions that manage authentication, create an authentication controller for
your ``User`` model. 

Run the following command from your project root to create a controller:

.. code-block:: php

   php artisan make:controller <filename>

Example
~~~~~~~

The following command creates a controller file called ``AuthController.php``:

.. code-block:: php

   php artisan make:controller AuthController

The ``AuthController.php`` file can store ``login()`` and ``logout()`` functions to
manage user authentication, as shown in the following code: 

.. literalinclude:: /includes/auth/AuthController.php
   :language: php
   :dedent:

Customize User Authentication
-----------------------------

In this section, you can learn how to use the following features to
customize your MongoDB user authentication process:

- :ref:`laravel-user-auth-sanctum`
- :ref:`laravel-user-auth-reminders`

.. _laravel-user-auth-sanctum:

Laravel Sanctum
~~~~~~~~~~~~~~~

You can install the Laravel Sanctum package to provide API tokens to users
and authenticate single-page applications. To manage API tokens, Sanctum stores
each token in a database table and authenticates incoming HTTP requests through
the ``Authorization`` header. To authenticate single-page applications, Sanctum
uses Laravel's cookie-based authentication services.

Run the following commands from your project root to install Laravel Sanctum,
then publish and run its migration files:

.. code-block:: bash

   composer require laravel/sanctum
   php artisan vendor:publish --provider="Laravel\Sanctum\SanctumServiceProvider"
   php artisan migrate

.. tip::

   To learn more about installing and configuring Laravel Sanctum, see the
   `Installation <https://laravel.com/docs/{+laravel-docs-version+}/sanctum#installation>`__
   section of the Laravel Sanctum guide.

To use Laravel Sanctum with {+odm-short+}, you must modify the ``PersonalAccessToken``
model provided by Sanctum.

Example
```````

The following code extends the ``PersonalAccessToken`` model provided by Sanctum
to enable MongoDB:

.. literalinclude:: /includes/auth/PersonalAccessToken.php
   :language: php
   :dedent:

After modifying the ``PersonalAccessToken`` model, instruct Sanctum to use the custom
model by calling the ``usePersonalAccessTokenModel()`` method in one of your application's
service providers. To learn more, see the `Overriding Default Models
<https://laravel.com/docs/{+laravel-docs-version+}/sanctum#overriding-default-models>`__
section of the Laravel Sanctum guide.

.. _laravel-user-auth-reminders:

Password Reminders 
~~~~~~~~~~~~~~~~~~

To add support for MongoDB-based password reminders, register the following service
provider in your application:

.. code-block:: php

   MongoDB\Laravel\Auth\PasswordResetServiceProvider::class

This service provider modifies the internal ``DatabaseReminderRepository``
to enable password reminders.

Example
```````

The following code updates the ``providers.php`` file in the ``bootstrap`` directory
of a Laravel application to register the ``PasswordResetServiceProvider`` provider:

.. code-block:: php
   :emphasize-lines: 4

   return [
     App\Providers\AppServiceProvider::class,
     MongoDB\Laravel\MongoDBServiceProvider::class,
     MongoDB\Laravel\Auth\PasswordResetServiceProvider::class
   ];

Additional Information
----------------------

To learn more about user authentication, see `Authentication <https://laravel.com/docs/{+laravel-docs-version+}/authentication>`__
in the Laravel documentation.

To learn more about Eloquent models, see the :ref:`laravel-eloquent-model-class` guide.