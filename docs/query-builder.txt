.. _laravel-query-builder:

=============
Query Builder
=============

.. facet::
   :name: genre
   :values: tutorial

.. meta::
   :keywords: code example

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use the {+odm-short+} extension of
the Laravel query builder to work with a MongoDB database. The query builder
lets you write queries for any supported database by using the same fluent
interface and syntax.

.. note::

   {+odm-short+} extends Laravel's query builder and Eloquent ORM, both of
   which can run similar database operations. To learn more about retrieving
   documents by using Eloquent models, see :ref:`laravel-fundamentals-retrieve`.

Laravel provides a **facade** to access the query builder class ``DB``, which
lets you perform database operations. Facades are static interfaces to
classes that make the syntax more concise, avoid runtime errors,and improve
testability.

{+odm-short+} aliases the ``DB`` method ``table()`` as ``collection()``. Chain
methods to specify the command and any constraints. Then, chain the ``get()``
method at the end to run them on the MongoDB collection. The following example
shows the syntax of a query builder call:

.. code-block:: php

   DB::collection('<collection name>')
       // chain methods by using the "->" object operator
       ->get();

This guide shows examples of the following query builder operations:

- Retrieve documents
  - Logical conditionals (orWhere, whereNot, and And)
  - Nested logic groups
  - Range (whereBetween, whereDate)
  - Check for ``null`` values (whereNull)
  - Array operations (whereIn, ...)
  - Pattern search (like)
- Retrieve distinct values
- Modify results: orderBy, groupBy, skip, projection, projection with pagination
- MongoDB query operators
  - General
  - Array
  - Geospatial
  - Projection
  - MongoDB cursor timeout
  - MongoDB raw expressions
- Aggregations (is this in Query Builder?)

- Write operations
- MongoDB write operations
  - Upsert
  - Increment/ decrement
  - Modify array values - push, pull
  - Remove a field from a document - Unset

MongoDB Write Operations

- Combine with Paginate (is this necessary?)
- Modify arrays - push and pull

Before You Get Started
----------------------

To run the code examples in this guide, complete the
:ref:`Quick Start <laravel-quick-start>` tutorial and paste the example code
in the ``show()`` controller method.

..
   TODO: this requirement can be removed after https://jira.mongodb.org/browse/DOCSP-37770 is completed

   Replace the `browse_movie.blade.php <https://github.com/mongodb-university/laravel-quickstart/blob/main/my-app/resources/views/browse_movies.blade.php>`__
   file, which accesses Eloquent ORM operation results, with the `browse_movies_array.blade.php <https://github.com/mongodb-university/laravel-quickstart/blob/main/my-app/resources/views/browse_movies_array.blade.php>`__
   file to access the ar

.. _laravel-retrieve-query-builder:

Retrieve Documents
------------------

To retrieve documents by using the query builder, import the
``Illuminate\Support\Facades\DB`` facade and compose your query by using
Laravel's query builder syntax.

This section includes examples on the following operators:
TODO


Where Method Example
~~~~~~~~~~~~~~~~~~~~

The following example shows how to use the ``where()`` method retrieve
documents from the ``movies`` collection that contain a ``imdb.votes`` field
value of ``350``. Click the :guilabel:`{+code-output-label+}` button to see the
results returned from the query:

.. io-code-block::

   .. input:: /includes/query-builder/MovieController.php
      :language: php
      :dedent:
      :start-after: begin query where
      :end-before: end query where

   .. output::
      :language: none
      :visible: false

      Title: Cosmos
      Year: 1980
      Runtime: 60
      IMDB Rating: 9.3
      IMDB Votes: 17174
      Plot: Astronomer Carl Sagan leads us on an engaging guided tour of the various elements and cosmological theories of the universe.

      Title: The Shawshank Redemption
      Year: 1994
      Runtime: 142
      IMDB Rating: 9.3
      IMDB Votes: 1521105
      Plot: Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.

      Title: The Shawshank Redemption
      Year: 1994
      Runtime: 142
      IMDB Rating: 9.3
      IMDB Votes: 1513145
      Plot: Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.

      Title: The Real Miyagi
      Year: 2015
      Runtime: 90
      IMDB Rating: 9.3
      IMDB Votes: 41
      Plot: The life of the greatest karate master of a generation.

Logical Conditional Operation Examples
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The examples in this section show query builder syntax you can use to perform
the following logical conditional operations:

- **OR** by chaining the ``orWhere()`` function
- **AND** by chaining another ``where()`` function
- **NOT** which uses the ``whereNot()`` function

- Nesting logical conditionals:  year 2010


OR - back to the future or year 1955
.. io-code-block::

   .. input:: /includes/query-builder/MovieController.php
      :language: php
      :dedent:
      :start-after: begin query orWhere
      :end-before: end query orWhere

   .. output::
      :language: none
      :visible: false

      

AND - rating == 8.2  and duration < 30

NOT - type != movie



The following example shows how to use the following logical conditional
operations:


``where()`` method retrieve
documents from the ``movies`` collection that contain a ``imdb.votes`` field
value of ``350``. Click the :guilabel:`{+code-output-label+}` button to see the
results returned from the query:

- Range and types (whereBetween, whereNull, whereDate)

whereBetween - rating 9 and 10
whereNull runtime: null
whereDate released between 2002 2005



regex: 
"The Lord of % ..."





