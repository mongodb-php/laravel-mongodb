.. _laravel-query-builder:

=============
Query Builder
=============

.. facet::
   :name: genre
   :values: tutorial

.. meta::
   :keywords: code example, aggregation

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use the {+odm-short+} extension of
the Laravel query builder to work with a MongoDB database. The query builder
lets you write queries for any supported database by using the same fluent
interface and syntax.

.. note::

   {+odm-short+} extends Laravel's query builder and Eloquent ORM, both of
   which can run similar database operations. To learn more about retrieving
   documents by using Eloquent models, see :ref:`laravel-fundamentals-retrieve`.
   TODO: link to Eloquent Models page once merged

Laravel provides a **facade** to access the query builder class ``DB``, which
lets you perform database operations. Facades are static interfaces to
classes that make the syntax more concise, avoid runtime errors,and improve
testability.

{+odm-short+} aliases the ``DB`` method ``table()`` as ``collection()``. Chain
methods to specify the command and any constraints. Then, chain the ``get()``
method at the end to run them on the MongoDB collection. The following example
shows the syntax of a query builder call:

.. code-block:: php

   DB::collection('<collection name>')
       // chain methods by using the "->" object operator
       ->get();

This guide shows examples of the following types of query builder operations:

- :ref:`laravel-retrieve-query-builder`
- :ref:`laravel-modify-results-query-builder`
- :ref:`laravel-mongodb-read-query-builder`
- :ref:`laravel-mongodb-write-query-builder`

Before You Get Started
----------------------

To run the code examples in this guide, complete the
:ref:`Quick Start <laravel-quick-start>` tutorial to configure a web
application and run the example code from a controller method.

..
   TODO: this requirement can be removed after https://jira.mongodb.org/browse/DOCSP-37770 is completed

   Replace the `browse_movie.blade.php <https://github.com/mongodb-university/laravel-quickstart/blob/main/my-app/resources/views/browse_movies.blade.php>`__
   file, which accesses Eloquent ORM operation results, with the `browse_movies_array.blade.php <https://github.com/mongodb-university/laravel-quickstart/blob/main/my-app/resources/views/browse_movies_array.blade.php>`__
   file to access the ar

To perform read and write operations by using the query builder, import the
``Illuminate\Support\Facades\DB`` facade and compose your query.

.. _laravel-retrieve-query-builder:

Retrieve Documents
------------------

This section includes query builder examples for read operations in the
following operator categories:

- :ref:`Where method <laravel-query-builder-where-example>`
- :ref:`Logical conditionals <laravel-query-builder-logical-operations>`
- :ref:`Ranges and type checks <laravel-query-builder-range-type>`
- :ref:`Pattern searches <laravel-query-builder-pattern>`
- :ref:`Retrieve distinct values <laravel-query-builder-distinct>`
- :ref:`Aggregations <laravel-query-builder-aggregations>`

.. _laravel-query-builder-where-example:

Where Method Example
~~~~~~~~~~~~~~~~~~~~

The following example shows how to use the ``where()`` query
builder method to retrieve documents from the ``movies`` collection
that contain a ``imdb.votes`` field value of ``350``. Click the
:guilabel:`{+code-output-label+}` button to see the results returned
by the query:

.. io-code-block::

   .. input:: /includes/query-builder/MovieController.php
      :language: php
      :dedent:
      :start-after: begin query where
      :end-before: end query where

   .. output::
      :language: none
      :visible: false

      Title: Cosmos
      Year: 1980
      Runtime: 60
      IMDB Rating: 9.3
      IMDB Votes: 17174
      Plot: Astronomer Carl Sagan leads us on an engaging guided tour of the various elements and cosmological theories of the universe.

      Title: The Shawshank Redemption
      Year: 1994
      Runtime: 142
      IMDB Rating: 9.3
      IMDB Votes: 1521105
      Plot: Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.

      Title: The Real Miyagi
      Year: 2015
      Runtime: 90
      IMDB Rating: 9.3
      IMDB Votes: 41
      Plot: The life of the greatest karate master of a generation.

.. _laravel-query-builder-logical-operations:

Logical Conditional Operation Examples
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The examples in this section show the query builder syntax you
can use to perform the following logical conditional operations:

- **OR** by chaining the ``orWhere()`` function
- **AND** by chaining another ``where()`` function
- **NOT** which uses the ``whereNot()`` function
- Nested logical operator groups

Logical OR Example
^^^^^^^^^^^^^^^^^^

The following example shows how to chain the ``orWhere()``
query builder method to retrieve documents from the
``movies`` collection that either match the ``year``
value of "1955" or match the title "Back to the Future":

.. literalinclude:: /includes/query-builder/MovieController.php
   :language: php
   :dedent:
   :start-after: begin query orWhere
   :end-before: end query orWhere

Logical AND Example
^^^^^^^^^^^^^^^^^^^

The following example shows how to chain the ``where()``
query builder method to retrieve documents from the
``movies`` collection that match both an ``imdb.rating``
value greater than "8.5" and a ``year`` value of less than
"1940":

.. literalinclude:: /includes/query-builder/MovieController.php
   :language: php
   :dedent:
   :start-after: begin query andWhere
   :end-before: end query andWhere

Logical NOT Example
^^^^^^^^^^^^^^^^^^^

The following example shows how to chain the ``where()``
query builder method to retrieve documents from the
``movies`` collection that match both an ``imdb.rating``
value greater than "8.5" and a ``year`` value of less than
"1940":

.. literalinclude:: /includes/query-builder/MovieController.php
   :language: php
   :dedent:
   :start-after: begin query whereNot
   :end-before: end query whereNot

Nested Logical Operator Group Example
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The following example shows how to chain the ``where()``
query builder method to retrieve documents from the
``movies`` collection that match both of the following
conditions:

- ``imdb.rating`` value is greater than 8.5
- ``year`` value is either 1986 or 1996

.. literalinclude:: /includes/query-builder/MovieController.php
   :language: php
   :dedent:
   :start-after: begin query nestedLogical
   :end-before: end query nestedLogical

.. _laravel-query-builder-range-type:

Ranges and Type Checks
~~~~~~~~~~~~~~~~~~~~~~

The examples in this section show the query builder syntax you
can use to perform to match values by using the following range
queries and type check operations:

- Values within a numerical range
- Empty or null values
- One or more values of a set
- Dates

Numerical Range Example
^^^^^^^^^^^^^^^^^^^^^^^

The following example shows how to use the ``whereBetween()``
query builder method to retrieve documents from the
``movies`` collection that contain an ``imdb.rating`` value
between "9" and "9.5":

.. io-code-block::

   .. input:: /includes/query-builder/MovieController.php
      :language: php
      :dedent:
      :start-after: begin query whereBetween
      :end-before: end query whereBetween

   .. output::
      :language: none
      :visible: false

      Title: Hollywood
      Year: 1980
      Runtime: 60
      IMDB Rating: 9.1
      IMDB Votes: 511
      Plot: The definitive documentary about the American silent film industry.

      Title: Cosmos
      Year: 1980
      Runtime: 60
      IMDB Rating: 9.3
      IMDB Votes: 17174
      Plot: Astronomer Carl Sagan leads us on an engaging guided tour of the various elements and cosmological theories of the universe.

      ...

Empty or Null Value Example
^^^^^^^^^^^^^^^^^^^^^^^^^^^

The following example shows how to use the ``whereNull()``
query builder method to retrieve documents from the
``movies`` collection that omit a ``runtime`` value
or field.

.. io-code-block::

   .. input:: /includes/query-builder/MovieController.php
      :language: php
      :dedent:
      :start-after: begin query whereNull
      :end-before: end query whereNull

   .. output::
      :language: none
      :visible: false

      Title: The Secret of the Magic Gourd
      Year: 2007
      Runtime:
      IMDB Rating: 5.6
      IMDB Votes: 340
      Plot: A boy learns the meaning of work after a magic gourd grants him anything he wants.

      Title: Jekyll
      Year: 2007
      Runtime:
      IMDB Rating: 8.2
      IMDB Votes: 6248
      Plot: London, 2007. Tom Jackman is the only living descendent of Dr. Jekyll and Mr. Hyde. He has made a deal with his dark side: a body share. What Mr. Hyde doesn't know is that Tom has a family....

.. seealso::

   The ``exists()`` MongoDB operation performs the same query.

One or More Values of a Set Example
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The following example shows how to use the ``whereIn()``
query builder method to retrieve documents from the
``movies`` collection that match at least one of the
``title`` values in the specified set.

.. io-code-block::

   .. input:: /includes/query-builder/MovieController.php
      :language: php
      :dedent:
      :start-after: begin query whereIn
      :end-before: end query whereIn

   .. output::
      :language: none
      :visible: false

      Title: Toy Story
      Year: 1995
      Runtime: 81
      IMDB Rating: 8.3
      IMDB Votes: 542659
      Plot: A cowboy doll is profoundly threatened and jealous when a new spaceman figure supplants him as top toy in a boy's room.

      Title: Johnny English
      Year: 2003
      Runtime: 87
      IMDB Rating: 6.1
      IMDB Votes: 107074
      Plot: After a sudden attack on the MI5, Johnny English, Britain's most confident yet unintelligent spy, becomes Britain's only spy.

      Title: Shrek 2
      Year: 2004
      Runtime: 93
      IMDB Rating: 7.2
      IMDB Votes: 283852
      Plot: Princess Fiona's parents invite her and Shrek to dinner to celebrate her marriage. If only they knew the newlyweds were both ogres.

Dates Example
^^^^^^^^^^^^^

The following example shows how to use the ``whereDate()``
query builder method to retrieve documents from the
``movies`` collection that match the specified date of
"2010-1-15" in the ``released`` field:

.. literalinclude:: /includes/query-builder/MovieController.php
   :language: php
   :dedent:
   :start-after: begin query whereDate
   :end-before: end query whereDate

.. _laravel-query-builder-pattern:

Pattern Search Example
~~~~~~~~~~~~~~~~~~~~~~

To specify a pattern, use the ``%`` symbol to match
zero or more characters or the ``_`` symbol to match
any single character.

The following example shows how to use the ``like()``
query builder method to retrieve documents from the
``movies`` collection that match the specified pattern:

.. io-code-block::

   .. input:: /includes/query-builder/MovieController.php
      :language: php
      :dedent:
      :start-after: begin query like
      :end-before: end query like

   .. output::
      :language: none
      :visible: false

      Title: Kiss of the Spider Woman
      ...

      Title: Spider-Man
      ...

      Title: Spider-Man 2
      ...

.. _laravel-query-builder-distinct:

Retrieve Distinct Values
~~~~~~~~~~~~~~~~~~~~~~~~

The following example shows how to use the ``distinct()``
query builder method to retrieve all the different values
of the ``year`` field for documents in the ``movies`` collections.

.. literalinclude:: /includes/query-builder/MovieController.php
   :language: php
   :dedent:
   :start-after: begin query distinct
   :end-before: end query distinct


.. _laravel-query-builder-aggregations:

Aggregations
~~~~~~~~~~~~

The examples in this section show the query builder syntax you
can use to perform aggregations, a set of calculations on the
query results, to return the following information:

- Results Grouped by Common Field Values
- Number of Results
- Maximum Value of a Field
- Minimum Value of a Field
- Average Value of a Field
- Summed Value of a Field
- Aggregation on Matched Results

Results Grouped by Common Field Values Example
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The following example shows how to use the ``groupBy()``
query builder method to retrieve documents as
TODO: fix this

.. literalinclude:: /includes/query-builder/MovieController.php
   :language: php
   :dedent:
   :start-after: begin query groupBy
   :end-before: end query groupBy

Number of Results Example
^^^^^^^^^^^^^^^^^^^^^^^^^

The following example shows how to use the ``count()``
query builder method to return the number of results
from a query that matches the entire ``movies``
collection:

.. literalinclude:: /includes/query-builder/MovieController.php
   :language: php
   :dedent:
   :start-after: begin aggregation count
   :end-before: end aggregation count

Maximum Value of a Field Example
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The following example shows how to use the ``max()``
query builder method to return the highest numerical
value of the ``runtime`` field from the entire
``movies`` collection:

.. literalinclude:: /includes/query-builder/MovieController.php
   :language: php
   :dedent:
   :start-after: begin aggregation max
   :end-before: end aggregation max

Minimum Value of a Field Example
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The following example shows how to use the ``min()``
query builder method to return the lowest numerical
value of the ``year`` field from the entire ``movies``
collection:

.. literalinclude:: /includes/query-builder/MovieController.php
   :language: php
   :dedent:
   :start-after: begin aggregation min
   :end-before: end aggregation min

Average Value of a Field Example
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The following example shows how to use the ``avg()``
query builder method to return the numerical average, or
arithmetic mean, of the ``imdb.rating`` values from
the entire ``movies`` collection.

.. literalinclude:: /includes/query-builder/MovieController.php
   :language: php
   :dedent:
   :start-after: begin aggregation avg
   :end-before: end aggregation avg

Summed Value of a Field Example
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The following example shows how to use the ``sum()``
query builder method to return the numerical total of
the ``imdb.votes`` values from the entire ``movies``
collection:


.. literalinclude:: /includes/query-builder/MovieController.php
   :language: php
   :dedent:
   :start-after: begin aggregation sum
   :end-before: end aggregation sum


Aggregation on Matched Results Example
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The following example shows how to use the ``sum()``
query builder method to return the numerical total of
the ``imdb.votes`` values from movies released in
after the year "2000":

.. literalinclude:: /includes/query-builder/MovieController.php
   :language: php
   :dedent:
   :start-after: begin aggregation with filter
   :end-before: end aggregation with filter

.. _laravel-modify-results-query-builder:

Modify Results
--------------

This section includes query builder examples for the
following functions that modify the order and format
of query results:

- Order results by the value of a field
- Omit a specified number of results
- Show a subset of fields and array values in the results
- Paginate the results



Order Results Example
~~~~~~~~~~~~~~~~~~~~~

The following example shows how to use the ``orderBy()``
query builder method to arrange the results that match
the filter specified in the ``title`` field by the
``imdb.rating`` value in descending order:

.. io-code-block::
   .. input:: /includes/query-builder/MovieController.php
      :language: php
      :dedent:
      :start-after: begin query orderBy
      :end-before: end query orderBy

   .. output::
      :language: none
      :visible: false

      Title: Back to the Future
      IMDB Rating: 8.5
      ...

      Title: Back to the Future Part II
      IMDB Rating: 7.8
      ...

      Title: Back to the Future Part III
      IMDB Rating: 7.4
      ...

Omit a Specified Number of Results Example
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example shows how to use the ``skip()``
query builder method to omit the first "4" results that
match the filter speficied in the ``title`` field,
sorted by the ``year`` value in descending order:

.. literalinclude:: /includes/query-builder/MovieController.php
   :language: php
   :dedent:
   :start-after: begin query skip
   :end-before: end query skip


Show a Subset of Fields and Array Values in the Results Example
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example shows how to use the ``project()``
query builder method to match documents that contain an
``imdb.rating`` value higher than "8.5" and return results
that only the following field values:

- ``title`` field
- ``cast`` field, including only the second through the fourth values of the array if they exist
- ``_id`` field, which is automatically included
-
.. io-code-block::

   .. input:: /includes/query-builder/MovieController.php
      :language: php
      :dedent:
      :start-after: begin query projection
      :end-before: end query projection

   .. output::
      :language: json
      :visible: false

      [
        {
          "_id": { ... },
          "title": "City Lights"
          "cast": [
            "Florence Lee",
            "Harry Myers",
            "Al Ernest Garcia"
          ],
        },
        {
          "_id": { ... },
          "title": "Modern Times",
          "cast": [
            "Paulette Goddard",
            "Henry Bergman",
            "Tiny Sandford"
          ]
        },
        {
          "_id": { ... },
          "title": "Casablanca"
          "cast": [
            "Ingrid Bergman",
            "Paul Henreid",
            "Claude Rains"
          ],
        },
        ...
      ]

Paginate the Results Example
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example shows how to use the ``paginate()``
query builder method to divide the entire ``movie``
collection into discrete result sets of 15 documents.
The example also includes a sort order to arrange the
results by the ``imdb.votes`` field in descending order
and a projection to include only specific fields in
the results.

.. literalinclude:: /includes/query-builder/MovieController.php
   :language: php
   :dedent:
   :start-after: begin query projection with pagination
   :end-before: end query projection with pagination

To learn more about pagination, see
`Paginating Query Builder Results <https://laravel.com/docs/{+mongodb-laravel-gh+}/pagination#paginating-query-builder-results>`__
in the Laravel documentation.

.. _laravel-mongodb-read-query-builder:

MongoDB Read Operations
-----------------------

This section includes query builder examples that
show how to use the following MongoDB-specific query
operations:

- Match documetns that contain a field
- Match documents that contain all specified fields
- Match documents that contain a specific number of elements in an array
- Match documents that contain a specific data type in a field
- Match documents that match a computed modulo value
- Match documents that match a regular expression
- Run MQL
- elemMatch
- geospatial

- General - Exists, All, Size, Type, Mod

Contains a Field Example
~~~~~~~~~~~~~~~~~~~~~~~~

The following example shows how to use the ``exists()``
query builder method to match documents that contain the
field ``random_review``:

.. literalinclude:: /includes/query-builder/MovieController.php
   :language: php
   :dedent:
   :start-after: begin query exists
   :end-before: end query exists

Contains All Fields Example
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example shows how to use the ``all``
query operator with the ``where()`` query builder
method to match documents that contain all the
specified fields:

.. literalinclude:: /includes/query-builder/MovieController.php
   :language: php
   :dedent:
   :start-after: begin query all
   :end-before: end query all

Match Array Size Example
~~~~~~~~~~~~~~~~~~~~~~~~

The following example shows how to pass the ``size``
query operator with the ``where()`` query builder
method to match documents that contain a ``directors``
field that contains an array of exactly "5" elements:

.. literalinclude:: /includes/query-builder/MovieController.php
   :language: php
   :dedent:
   :start-after: begin query size
   :end-before: end query size

Match Data Type Example
~~~~~~~~~~~~~~~~~~~~~~~

The following example shows how to pass the ``type``
query operator with the ``where()`` query builder
method to match documents that contain a ``directors``
field that contains an array of exactly "5" elements:

.. literalinclude:: /includes/query-builder/MovieController.php
   :language: php
   :dedent:
   :start-after: begin query type
   :end-before: end query type


Mod - an even year

.. literalinclude:: /includes/query-builder/MovieController.php
   :language: php
   :dedent:
   :start-after: begin query modulo
   :end-before: end query modulo

- Regex - "Match Regular Expressions"

regex:
"^the lord of .*"
matches results such as "The Lord of the Rings: ..."

``use MongoDB\BSON\Regex;``

.. literalinclude:: /includes/query-builder/MovieController.php
   :language: php
   :dedent:
   :start-after: begin query whereRegex
   :end-before: end query whereRegex

- Raw expressions

whereRaw([
query
])->get()
returns collection of models

equivalent of db.movies.find({ 'imdb.votes': { $gte: 1000 }, $or: [{ "imdb.rating": { $gt: 7 }, directors: { $in: [ "Yasujiro Ozu", "Sofia Coppola", "Federico Fellini" ] } }]});

.. literalinclude:: /includes/query-builder/MovieController.php
   :language: php
   :dedent:
   :start-after: begin query raw
   :end-before: end query raw

- Array - ElemMatch "Element Match"

.. literalinclude:: /includes/query-builder/MovieController.php
   :language: php
   :dedent:
   :start-after: begin query elemMatch
   :end-before: end query elemMatch

https://www.mongodb.com/docs/manual/reference/operator/query/elemMatch/


Geospatial Operations
~~~~~~~~~~~~~~~~~~~~~

The examples in this section show the query builder syntax you
can use to perform geospatial queries on GeoJSON or coordinate
pair data to retrieve the following types of locations:

- Near a position
- Within an area
- Intersecting a geometry
- Proximity data for nearby matches

Near a Position Example
~~~~~~~~~~~~~~~~~~~~~~~

- Near

.. literalinclude:: /includes/query-builder/MovieController.php
   :language: php
   :dedent:
   :start-after: begin query near
   :end-before: end query near

https://www.mongodb.com/docs/manual/reference/operator/query/near/

You may need to create the index
db.theaters.createIndex({"location.geo": "2dsphere"});

Within an Area Example
~~~~~~~~~~~~~~~~~~~~~~

geoWithin

.. literalinclude:: /includes/query-builder/MovieController.php
   :language: php
   :dedent:
   :start-after: begin query geoWithin
   :end-before: end query geoWithin

uses https://www.mongodb.com/docs/drivers/java/sync/current/fundamentals/crud/read-operations/geo/#query-within-a-range

Intersecting a Geometry Example
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

geoIntersects

.. literalinclude:: /includes/query-builder/MovieController.php
   :language: php
   :dedent:
   :start-after: begin query geoIntersects
   :end-before: end query geoIntersects

db.theaters.find({ "location.geo": { $geoIntersects: { $geometry: { type: "LineString", coordinates: [[-73.600525, 40.74416], [-72.600525, 40.74416]] } } } } )

Proximity Data for Nearby Matches Example
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

geoNear

.. literalinclude:: /includes/query-builder/MovieController.php
   :language: php
   :dedent:
   :start-after: begin query geoNear
   :end-before: end query geoNear


https://www.mongodb.com/docs/manual/reference/operator/aggregation/geoNear/



- Cursor timeout

.. literalinclude:: /includes/query-builder/MovieController.php
   :language: php
   :dedent:
   :start-after: begin query cursor timeout
   :end-before: end query cursor timeout

Note this is in seconds rather than milliseconds.

.. _laravel-mongodb-write-query-builder:

MongoDB Write Operations
------------------------

- Upsert a document
- Increment a numerical value
- Decrement a numerical value
- Add an array element
- Remove a value from an array
- Remove a field from a document

Upsert a Document Example
~~~~~~~~~~~~~~~~~~~~~~~~~

The following example shows how to use the ``update()``
query builder method and ``upsert`` option to update
the matching document or insert one with the specified
data if it does not exist. When setting the ``upsert``
option to ``true``, if the document does not exist,
the command inserts both the data and the ``title``
field and value specified in the ``where()`` query
operation:

.. literalinclude:: /includes/query-builder/MovieController.php
   :language: php
   :dedent:
   :start-after: begin upsert
   :end-before: end upsert

Increment a Numerical Value Example
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example shows how to use the ``increment()``
query builder method to add "3000" to the value of
the ``imdb.votes`` field in the matched document:

.. literalinclude:: /includes/query-builder/MovieController.php
   :language: php
   :dedent:
   :start-after: begin increment
   :end-before: end increment

Decrement a Numerical Value Example
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example shows how to use the ``decrement()``
query builder method to subtract "0.2" from the value of
the ``imdb.rating`` field in the matched document:

.. literalinclude:: /includes/query-builder/MovieController.php
   :language: php
   :dedent:
   :start-after: begin decrement
   :end-before: end decrement

- Modify array values - push, pull

Add an Array Element Example
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example shows how to use the ``push()``
query builder method to add "Gary Cole" to the ``cast``
array field in the matched document:

.. literalinclude:: /includes/query-builder/MovieController.php
   :language: php
   :dedent:
   :start-after: begin push
   :end-before: end push

Remove an Array Element Example
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example shows how to use the ``pull()``
query builder method to remove the "Adventure" value
from the ``genres`` field from the document matched
by the query:

.. literalinclude:: /includes/query-builder/MovieController.php
   :language: php
   :dedent:
   :start-after: begin pull
   :end-before: end pull

Remove a Field Example
~~~~~~~~~~~~~~~~~~~~~~

The following example shows how to use the ``unset()``
query builder method to remove the ``tomatoes.viewer``
field and value from the document matched by the query:

.. literalinclude:: /includes/query-builder/MovieController.php
   :language: php
   :dedent:
   :start-after: begin unset
   :end-before: end unset
