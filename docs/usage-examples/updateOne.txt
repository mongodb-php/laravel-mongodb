.. _laravel-update-one-usage:

=================
Update a Document
=================

You can update a document in a collection by chaining the ``where()``, ``first()``,
and ``update()`` methods to an Eloquent model or a query builder.

Pass a query filter to the ``where()`` method and call the ``first()`` method to match 
only one document. Then, pass the document changes to the ``update()`` method to update
one document that matches the filter.

To learn more about updating data with {+odm-short+}, see the `Updates
<https://laravel.com/docs/6.x/eloquent#updates>`__ section of the Laravel documentation.

Example
-------

This usage example updates a document that matches a query filter from the ``movies``
collection in the ``sample_mflix`` database. The example uses the ``Movie`` Eloquent model
to represent the ``movies`` collection.

This example performs the following actions:

- Defines a query filter to match documents in which the value of the ``title`` field
  is ``'Carol'``
- Calls the ``first()`` method to match only one document
- Calls the ``update()`` method to update the value of the ``imdb`` field

.. important:: 

   Before running the usage example, you must specify the changes to the ``imdb`` field in
   the ``movie.json`` file, created in the :ref:`laravel-quick-start-write-data` step of
   the Quick Start. Replace the contents of ``movie.json`` with the following data:

   .. code-block:: bash

      {
         "imdb": {
            "rating": 7.3,
            "votes": 142000
         }
      }

.. io-code-block::
   :copyable: true

   .. input::
      :language: php

      public function store(Request $request)
      {
         $movie = Movie::where('title', 'Carol')
                 ->first()
                 ->update(['imdb' => $request->imdb]); 
         $movie->save();
      }
      
      public function show()
      {
         return view('browse_movies', [
               'movies' => Movie::where('title', 'Carol')
                           ->get()
         ]);
      }

   .. output::
      :language: console
      :visible: false

      Title: Carol
      Year: 2015
      Runtime: 118
      IMDB Rating: 7.3
      IMDB Votes: 142000
      Plot: Set in 1950s New York, a department-store clerk who dreams of a better life falls
      for an older, married woman.

To perform the update operation, edit the ``store()`` and ``show()`` functions in your
``MovieController.php`` file to match the preceding code. Then, start your application
by running the following command:

.. code-block:: bash

   php artisan serve

Send the JSON payload to the endpoint as a ``POST`` request by running the following command:

.. code-block:: bash

   curl -H "Content-Type: application/json" --data @movie.json http://localhost:8000/api/movies

Open the following URL in your web browser to view the modified document:

.. code-block:: none

   http://127.0.0.1:8000/browse_movies

.. tip:: 

   For more information on adding the usage example to your application, see the
   :ref:`add-usage-examples` section of the Usage Example landing page.