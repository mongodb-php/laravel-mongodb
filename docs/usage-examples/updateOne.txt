.. _laravel-update-one-usage:

=================
Update a Document
=================

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: update one, modify, code example

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

You can update a document in a collection by chaining the ``where()``, ``first()``,
and ``update()`` methods to an Eloquent model or a query builder.

Pass a query filter to the ``where()`` method and call the ``first()`` method to match 
only one document. Then, pass the document changes to the ``update()`` method to update
one document that matches the filter.

To learn more about updating data with {+odm-short+}, see the `Updates
<https://laravel.com/docs/6.x/eloquent#updates>`__ section of the Laravel documentation.

Example
-------

This usage example updates a document that matches a query filter from the ``movies``
collection in the ``sample_mflix`` database. The example uses the ``Movie`` Eloquent model
to represent the ``movies`` collection.

This example performs the following actions:

- Defines a query filter to match documents in which the value of the ``title`` field
  is ``'Carol'``
- Calls the ``first()`` method to match only one document
- Calls the ``update()`` method to update the value of the ``imdb.rating`` nested field to
  ``7.3`` and the ``imdb.votes`` nested field to ``142000``

.. io-code-block::
   :copyable: true

   .. input::
      :language: php

      $movie = Movie::where('title', 'Carol')
          ->first()
          ->update([
              "imdb" => [
                  "rating" => 7.3,
                  "votes" => 142000
               ],
         ]);

   .. output::
      :language: console
      :visible: false

      Title: Carol
      Year: 2015
      Runtime: 118
      IMDB Rating: 7.3
      IMDB Votes: 142000
      Plot: Set in 1950s New York, a department-store clerk who dreams of a better life falls
      for an older, married woman.

To view the result, run the operation in a controller endpoint. Then, start your application
by running the following command:

.. code-block:: bash

   php artisan serve

.. tip::

   You can add this usage example to the Laravel application created in the :ref:`laravel-quick-start`
   and view the expected output. For instructions on running the update operation by editing your
   {+quickstart-app-name+}, see the :ref:`Usage Example landing page <laravel-usage-examples>`.